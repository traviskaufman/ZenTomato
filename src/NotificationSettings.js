// Generated by ReScript, PLEASE EDIT WITH CARE

import * as CssJs from "bs-css-emotion/src/CssJs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Recoil from "recoil";
import * as CssHelpers from "./CssHelpers.js";
import * as Css_Js_Core from "bs-css/src/Css_Js_Core.js";

import {ReactComponent as NotificationBellSVG} from './assets/notificationBell.svg';
;

var NotificationBell = {};

var supportsNotifications = ("Notification" in window);

var enabled = Recoil.atom({
      key: "NotificationSettings.Model.enabled",
      default: false,
      effects_UNSTABLE: [(function (param) {
            Curry._1(param.onSet, (function (isEnabled, param, param$1) {
                    if (isEnabled) {
                      localStorage.setItem("notificationsEnabled", "you betcha!");
                    } else {
                      localStorage.removeItem("notificationsEnabled");
                    }
                    
                  }));
            
          })]
    });

function useRunPermissionFlow(param) {
  var match = Recoil.useRecoilState(enabled);
  var setEnabled = match[1];
  var enabled$1 = match[0];
  return function (param) {
    Curry._1(setEnabled, (function (param) {
            return !enabled$1;
          }));
    var __x = Notification.requestPermission();
    __x.then(function (permission) {
          if (permission === "denied") {
            window.alert("Notifications have been disabled for ZenTomato. You can re-enable them in your browser's settings.");
          }
          Curry._1(setEnabled, (function (param) {
                  return permission === "granted";
                }));
          return Promise.resolve(undefined);
        });
    
  };
}

function useIsEnabled(param) {
  return Recoil.useRecoilState(enabled)[0];
}

function useAttemptToggleNotifications(param) {
  var match = Recoil.useRecoilState(enabled);
  var setEnabled = match[1];
  var runPermissionFlow = useRunPermissionFlow(undefined);
  return function (param) {
    if (!supportsNotifications) {
      return ;
    }
    var match = Notification.permission;
    if (match === "granted") {
      return Curry._1(setEnabled, (function (isEnabled) {
                    return !isEnabled;
                  }));
    }
    Curry._1(runPermissionFlow, undefined);
    
  };
}

var Model = {
  useIsEnabled: useIsEnabled,
  useAttemptToggleNotifications: useAttemptToggleNotifications
};

var notificationButton = CssJs.merge([
      CssHelpers.btnReset,
      CssHelpers.hover,
      CssJs.style([
            CssJs.cursor("pointer"),
            CssJs.transition(125, undefined, CssJs.ease, "transform"),
            CssJs.marginBottom(CssJs.px(20)),
            CssJs.selector("&:last-child", [CssJs.marginBottom(CssJs.zero)]),
            CssJs.media("(max-width: 600px)", [
                  CssJs.marginBottom(CssJs.zero),
                  CssJs.marginRight(CssJs.px(20)),
                  CssJs.selector("&:last-child", [CssJs.marginRight(CssJs.zero)])
                ])
          ])
    ]);

function notificationBell(enabled) {
  return CssJs.style([
              CssJs.selector("#bell", [
                    CssJs.transition(125, undefined, CssJs.ease, "fill"),
                    Css_Js_Core.SVG.fill(enabled ? CssJs.$$var("--theme-text-on-primary") : CssJs.none)
                  ]),
              CssJs.marginRight(CssJs.px(8))
            ]);
}

var Styles = {
  notificationButton: notificationButton,
  notificationBell: notificationBell
};

function NotificationSettings$default(Props) {
  var notificationsEnabled = useIsEnabled(undefined);
  var attemptToggleNotifications = useAttemptToggleNotifications(undefined);
  return React.createElement("button", {
              "aria-label": (
                notificationsEnabled ? "Disable" : "Enable"
              ) + " notifications",
              className: notificationButton,
              hidden: !supportsNotifications,
              onClick: (function (param) {
                  return Curry._1(attemptToggleNotifications, undefined);
                })
            }, React.createElement(NotificationBellSVG, {
                  className: notificationBell(notificationsEnabled),
                  title: (
                    notificationsEnabled ? "Disable" : "Enable"
                  ) + " notifications"
                }));
}

var $$default = NotificationSettings$default;

export {
  NotificationBell ,
  Model ,
  Styles ,
  $$default ,
  $$default as default,
  
}
/*  Not a pure module */
